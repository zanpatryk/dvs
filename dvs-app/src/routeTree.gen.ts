/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContactImport } from './routes/contact'
import { Route as AboutImport } from './routes/about'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardTicketsImport } from './routes/dashboard/tickets'
import { Route as DashboardPollsImport } from './routes/dashboard/polls'

// Create/Update Routes

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardTicketsRoute = DashboardTicketsImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardPollsRoute = DashboardPollsImport.update({
  id: '/polls',
  path: '/polls',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/polls': {
      id: '/dashboard/polls'
      path: '/polls'
      fullPath: '/dashboard/polls'
      preLoaderRoute: typeof DashboardPollsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/tickets': {
      id: '/dashboard/tickets'
      path: '/tickets'
      fullPath: '/dashboard/tickets'
      preLoaderRoute: typeof DashboardTicketsImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardPollsRoute: typeof DashboardPollsRoute
  DashboardTicketsRoute: typeof DashboardTicketsRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardPollsRoute: DashboardPollsRoute,
  DashboardTicketsRoute: DashboardTicketsRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/dashboard/polls': typeof DashboardPollsRoute
  '/dashboard/tickets': typeof DashboardTicketsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/dashboard/polls': typeof DashboardPollsRoute
  '/dashboard/tickets': typeof DashboardTicketsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/dashboard/polls': typeof DashboardPollsRoute
  '/dashboard/tickets': typeof DashboardTicketsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/about'
    | '/contact'
    | '/dashboard/polls'
    | '/dashboard/tickets'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/about'
    | '/contact'
    | '/dashboard/polls'
    | '/dashboard/tickets'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/about'
    | '/contact'
    | '/dashboard/polls'
    | '/dashboard/tickets'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/about",
        "/contact"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/polls",
        "/dashboard/tickets"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/dashboard/polls": {
      "filePath": "dashboard/polls.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/tickets": {
      "filePath": "dashboard/tickets.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
